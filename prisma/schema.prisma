// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Potfolio {
    id          String       @id @default(cuid())
    userId      String
    title       String
    trades      Trade[]
    investments Investment[]
    fundings    Funding[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Trade {
    id          String   @id @default(cuid())
    portfolioId String
    date        DateTime
    instrument  String
    leverage    Int
    entry       Decimal
    sl          Decimal
    tp          Decimal
    result      Boolean
    status      Boolean
    comment     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    portfolio   Potfolio @relation(fields: [portfolioId], references: [id])

    @@index([portfolioId])
}

model Investment {
    id          String   @id @default(cuid())
    portfolioId String
    entryPrice  Decimal
    entryDate   DateTime
    comment     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    portfolio   Potfolio @relation(fields: [portfolioId], references: [id])

    @@index([portfolioId])
}

model Funding {
    id          String   @id @default(cuid())
    portfolioId String
    date        DateTime
    amount      Decimal
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    portfolio   Potfolio @relation(fields: [portfolioId], references: [id])

    @@index([portfolioId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    portfolios    Potfolio[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
